Group 12:
  - Fernando Serrano
  - Pablo Mueller
  - Edward Terry

Project 1:

===========================================================================
***Excercise 1: Simple Threading

We implemented the ThreadTest(int n) function as asked. This simply creates N
new threads instead of one. Each thread loops 5 times as expected, and the -rs
command makes them interleave more randomly.

For the next step we used semaphores to synchronize the threads running
SimpleThread(). If synchronization is not done properly, the SharedVariable will
be incremented to the incorrect number. This occurs because context switches may
occur before any assembly instructions. This means one thread can attempt to
update a variable's value, but another thread can retrieve the same variable's
value before the other thread's update is complete. Outdated memory retrieval
messes up the expected values. We use semaphores, locks, and conditions to stop
such occurrences.

If the threads are properly synchronized, N threads are running, and each loops
5 times, we should expect the value of SharedVariable to be 5N when all threads
have finished running(e.g. 3 threads makes SharedVariable end up as 15).
With out synchronization the value is usually and incorrectly 5.
Using Semaphores to synchronize the SimpleThread() function, the correct value
is obtained. Random seeds do not change this either. Essentially, the
critical section (the retrieval of the SharedValue and it's increment) is
preceded by a P() call and followed by a V() call. Finally, a "barrier" is
put up to stop early finishing threads from displaying the wrong result.


***Exercise 2: Implementing Locks

We implemented Locks to be near identical to the Semaphore implementation.
The primary difference is the internal value contained within it.
It is always initialized to one. This allows only one thread to acquire
the Lock at a time. The Lock also keeps track of which thread acquired
it. Only the thread holding the Lock can successfully release it.
For testing, we implemented the same SimpleThread() function using
Locks instead of Semaphores. The results were still the same as before.
The SharedVariable sums up to 5N (N being the number of threads) as expected.
Using the random seed option does not affect this.


***Exercise 3: Implementing Conditions

Conditions are also similar to semaphores and locks in implementation.
The primary difference is that the condition does not have a value to check
internally during it's function calls. There is a list of threads waiting
on the condition though. By waiting, we mean they are put in the
blocked state via a sleep() call. The Wait() function does this, assuming
the lock passed in is acquired by the thread calling it. Before putting itself
to sleep, the thread releases the lock, for use by other threads. Once, another
thread performs a Signal() or Broadcast(), a thread that was waiting on the
condition will be awoken, and attempt to re-acquire the lock. The Signal()
function wakes a single thread waiting on the condition, while the Broadcast()
function wakes all threads waiting on the condition. These functions can only
work successfully if the thread calling them has acquired the Lock
passed to them.

***Exercise 4: Elevator

We seem to have successfully implemented a simple elevator using conditions
and locks. Our implementationa uses only one Condition variable
and one Lock variable. We have the following sharedvariables:

    1. An array of Floor structs, where each Floor struct has 2 int variables.
       One int represents the number of people on a floor wishing to
       enter the elevator, and the other the number of people wanting to exit
       the elevator on that floor.
    2. The current Floor value.
    3. The number of people in the elevator.

The use of these shared data must be synchronized. If they are not, errors
start to occur. A person thread may miss the elevator when it should have
entered it. People may enter the elevator when it is on the wrong floor,
and so on.

The elevator must acquire the Lock before it changes the floor it is on.
It then broadcasts, waking every thread waiting on the condition. It then
waits on the condition while there are still people wanting to get off the
current floor (known by the floor structure for the current floor). This
gives person threads a change to get on and off the elevator.
The elevator is awakened by every person thread that either gets on the
elevator or gets off it, allowing it to recheck if there are more people
getting off on the floor. Once there are no more people getting off,
the elevator wakes every thread waiting via a broadcast, and waits
on the condition while there are people trying to get on the elevator,
and there is still room.

A person thread starts by increasing the number of people wanting to get on
the elevator from the floor it is on via the floor structure representing
it's floor. It then waits on the condition while the elevator is
not on its floor or the elevator is full.  This allows the elevator to skip
picking up someone if it is full at the time it arrives on a floor
with a person waiting.  Once the person thread is awakened, it
"gets on the elevator". This is done by decrementing the number of people
getting on on the floor it's at, and increments the getting off value of the
floor it wants to exit on. It also increases the number of people occupying
the elevator. This is done while still owning the lock.
It also broadcasts waking all threads waiting on the condition (possibly
and likely including the elevator). It then waits on the condition until
the current floor is the floor it desired to get off on.  The elevator broadcasts
everytime it reaches a floor, so the person thread would be woken up at this point.
Once the elevator reaches the correct floor, and the person thread is woken up,
it decrements the number of people occupying the elevator as well as the
number of people getting off on that floor (in the floor structure).

Our implementation seems to work well, with and without a random seed specified.
We tested it on varying floor numbers, varying numbers of people threads, and
with scenarios that make the elevator reach max occupancy and not. The sample
output given is stopped by us, as currently, there is no mechanism
in place to stop the elevator from running forever.

==================================================================

Output from Exercise 1 SimpleThreading: ./nachos

*** thread 0 looped 0 times
*** thread 1 looped 0 times
*** thread 2 looped 0 times
*** thread 3 looped 0 times
*** thread 4 looped 0 times
*** thread 0 looped 1 times
*** thread 1 looped 1 times
*** thread 2 looped 1 times
*** thread 3 looped 1 times
*** thread 4 looped 1 times
*** thread 0 looped 2 times
*** thread 1 looped 2 times
*** thread 2 looped 2 times
*** thread 3 looped 2 times
*** thread 4 looped 2 times
*** thread 0 looped 3 times
*** thread 1 looped 3 times
*** thread 2 looped 3 times
*** thread 3 looped 3 times
*** thread 4 looped 3 times
*** thread 0 looped 4 times
*** thread 1 looped 4 times
*** thread 2 looped 4 times
*** thread 3 looped 4 times
*** thread 4 looped 4 times
No threads ready or runnable, and no pending interrupts.
Assuming the program completed.
Machine halting!

Ticks: total 340, idle 0, system 340, user 0
Disk I/O: reads 0, writes 0
Console I/O: reads 0, writes 0
Paging: faults 0
Network I/O: packets received 0, sent 0

============================================================================

Output from Exercise 1(Semaphores): ./nachos -rs 153

*** thread 0 sees value 0
*** thread 1 sees value 1
*** thread 2 sees value 2
*** thread 3 sees value 3
*** thread 4 sees value 4
*** thread 0 sees value 5
*** thread 1 sees value 6
*** thread 0 sees value 7
*** thread 3 sees value 8
*** thread 4 sees value 9
*** thread 3 sees value 10
*** thread 1 sees value 11
*** thread 0 sees value 12
*** thread 2 sees value 13
*** thread 0 sees value 14
*** thread 3 sees value 15
*** thread 1 sees value 16
*** thread 4 sees value 17
*** thread 2 sees value 18
*** thread 1 sees value 19
*** thread 3 sees value 20
*** thread 4 sees value 21
*** thread 2 sees value 22
*** thread 4 sees value 23
*** thread 2 sees value 24
Thread 2 sees final value 25
Thread 4 sees final value 25
Thread 1 sees final value 25
Thread 0 sees final value 25
Thread 3 sees final value 25
No threads ready or runnable, and no pending interrupts.
Assuming the program completed.
Machine halting!

Ticks: total 1647, idle 67, system 1580, user 0
Disk I/O: reads 0, writes 0
Console I/O: reads 0, writes 0
Paging: faults 0
Network I/O: packets received 0, sent 0

=================================================================

Output from Exercise 2(Locks): ./nachos -rs 103

*** thread 0 sees value 0
*** thread 3 sees value 1
*** thread 2 sees value 2
*** thread 4 sees value 3
*** thread 2 sees value 4
*** thread 0 sees value 5
*** thread 3 sees value 6
*** thread 1 sees value 7
*** thread 3 sees value 8
*** thread 1 sees value 9
*** thread 0 sees value 10
*** thread 4 sees value 11
*** thread 2 sees value 12
*** thread 3 sees value 13
*** thread 1 sees value 14
*** thread 0 sees value 15
*** thread 4 sees value 16
*** thread 2 sees value 17
*** thread 4 sees value 18
*** thread 1 sees value 19
*** thread 0 sees value 20
*** thread 3 sees value 21
*** thread 2 sees value 22
*** thread 4 sees value 23
*** thread 1 sees value 24
Thread 1 sees final value 25
Thread 4 sees final value 25
Thread 2 sees final value 25
Thread 0 sees final value 25
Thread 3 sees final value 25
No threads ready or runnable, and no pending interrupts.
Assuming the program completed.
Machine halting!

Ticks: total 1414, idle 24, system 1390, user 0
Disk I/O: reads 0, writes 0
Console I/O: reads 0, writes 0
Paging: faults 0
Network I/O: packets received 0, sent 0

=============================================================

Output from Exercise 4(Elevator)(12people, 50 floors): ./nachos

Elevator arrives at floor 1.
Person 0 wants to go to floor 15 from floor 1.
Person 0 got into the elevator at floor 1.
Person 1 wants to go to floor 11 from floor 1.
Person 1 got into the elevator at floor 1.
Person 2 wants to go to floor 2 from floor 1.
Person 2 got into the elevator at floor 1.
Person 3 wants to go to floor 2 from floor 1.
Person 3 got into the elevator at floor 1.
Person 4 wants to go to floor 18 from floor 2.
Person 5 wants to go to floor 50 from floor 30.
Person 6 wants to go to floor 20 from floor 45.
Person 7 wants to go to floor 7 from floor 42.
Person 8 wants to go to floor 17 from floor 10.
Person 9 wants to go to floor 12 from floor 47.
Person 10 wants to go to floor 12 from floor 43.
Person 11 wants to go to floor 1 from floor 50.
Elevator arrives at floor 2.
Person 2 got out of the elevator at floor 2.
Person 3 got out of the elevator at floor 2.
Person 4 got into the elevator at floor 2.
Elevator arrives at floor 3.
Elevator arrives at floor 4.
Elevator arrives at floor 5.
Elevator arrives at floor 6.
Elevator arrives at floor 7.
Elevator arrives at floor 8.
Elevator arrives at floor 9.
Elevator arrives at floor 10.
Person 8 got into the elevator at floor 10.
Elevator arrives at floor 11.
Person 1 got out of the elevator at floor 11.
Elevator arrives at floor 12.
Elevator arrives at floor 13.
Elevator arrives at floor 14.
Elevator arrives at floor 15.
Person 0 got out of the elevator at floor 15.
Elevator arrives at floor 16.
Elevator arrives at floor 17.
Person 8 got out of the elevator at floor 17.
Elevator arrives at floor 18.
Person 4 got out of the elevator at floor 18.
Elevator arrives at floor 19.
Elevator arrives at floor 20.
Elevator arrives at floor 21.
Elevator arrives at floor 22.
Elevator arrives at floor 23.
Elevator arrives at floor 24.
Elevator arrives at floor 25.
Elevator arrives at floor 26.
Elevator arrives at floor 27.
Elevator arrives at floor 28.
Elevator arrives at floor 29.
Elevator arrives at floor 30.
Person 5 got into the elevator at floor 30.
Elevator arrives at floor 31.
Elevator arrives at floor 32.
Elevator arrives at floor 33.
Elevator arrives at floor 34.
Elevator arrives at floor 35.
Elevator arrives at floor 36.
Elevator arrives at floor 37.
Elevator arrives at floor 38.
Elevator arrives at floor 39.
Elevator arrives at floor 40.
Elevator arrives at floor 41.
Elevator arrives at floor 42.
Person 7 got into the elevator at floor 42.
Elevator arrives at floor 43.
Person 10 got into the elevator at floor 43.
Elevator arrives at floor 44.
Elevator arrives at floor 45.
Person 6 got into the elevator at floor 45.
Elevator arrives at floor 46.
Elevator arrives at floor 47.
Person 9 got into the elevator at floor 47.
Elevator arrives at floor 48.
Elevator arrives at floor 49.
Elevator arrives at floor 50.
Person 5 got out of the elevator at floor 50.
Person 11 got into the elevator at floor 50.
Elevator arrives at floor 49.
Elevator arrives at floor 48.
Elevator arrives at floor 47.
Elevator arrives at floor 46.
Elevator arrives at floor 45.
Elevator arrives at floor 44.
Elevator arrives at floor 43.
Elevator arrives at floor 42.
Elevator arrives at floor 41.
Elevator arrives at floor 40.
Elevator arrives at floor 39.
Elevator arrives at floor 38.
Elevator arrives at floor 37.
Elevator arrives at floor 36.
Elevator arrives at floor 35.
...
...
...
